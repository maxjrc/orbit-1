generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model workspace {
  groupId           Int                @id @unique
  activitySessions  ActivitySession[]
  allies            Ally[]
  quotas            Quota[]
  sessionTypes      SessionType[]
  config            config[]
  documents         document[]
  inactivityNotices inactivityNotice[]
  ranks             rank[]
  roles             role[]
  userBook          userBook[]
  wallposts         wallPost[]
  apiKey            apiKey[]
  members           workspaceMember[]
  adjustments       ActivityAdjustment[]
  gameServers       GameServer[]
}

model config {
  id               Int       @id @default(autoincrement())
  key              String
  value            Json
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspaceGroupId Int
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model instanceConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  userid            BigInt             @id @unique
  isOwner           Boolean?
  registered        Boolean?
  picture           String?
  username          String?
  activitySessions  ActivitySession[]
  sessions          Session[]
  documents         document[]
  inactivityNotices inactivityNotice[]
  ranks             rank[]
  sessionsRoles     sessionUser[]
  writtenBooks      userBook[]         @relation("bookAdmin")
  book              userBook[]         @relation("bookUser")
  info              userInfo?
  wallPosts         wallPost[]
  Ally              Ally[]
  roles             role[]
  allyVisits        allyVisit[]
  apiKey            apiKey[]
  birthdayDay       Int?
  birthdayMonth     Int?
  workspaceMemberships workspaceMember[]
  adjustmentsReceived ActivityAdjustment[] @relation("AdjustmentUser")
  adjustmentsMade     ActivityAdjustment[] @relation("AdjustmentActor")
  sessionNotes      SessionNote[]
  sessionLogsAsActor SessionLog[] @relation("SessionLogActor")
  sessionLogsAsTarget SessionLog[] @relation("SessionLogTarget")
  serverCommands    ServerCommand[]
  moderatedMessages ChatMessage[]
  queuedCommands    ServerCommandQueue[]
}

model userInfo {
  userid       BigInt  @id
  passwordhash String?
  tfa          String?
  user         user    @relation(fields: [userid], references: [userid])
}

model QuotaRole {
  quotaId String @db.Uuid
  roleId  String @db.Uuid

  quota Quota @relation(fields: [quotaId], references: [id])
  role  role  @relation(fields: [roleId], references: [id])

  @@unique([quotaId, roleId])
}

model role {
  id               String        @id @unique @default(uuid()) @db.Uuid
  permissions      String[]
  isOwnerRole      Boolean?      @default(false)
  workspaceGroupId Int
  name             String
  groupRoles       Int[]
  workspace        workspace     @relation(fields: [workspaceGroupId], references: [groupId])
  quotaRoles       QuotaRole[]
  SessionType      SessionType[]
  documents        document[]
  members          user[]
}

model wallPost {
  id               Int       @id @default(autoincrement())
  content          String
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspaceGroupId Int
  authorId         BigInt
  author           user      @relation(fields: [authorId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model SessionType {
  id               String     @id @unique @default(uuid()) @db.Uuid
  name             String
  description      String?
  gameId           BigInt?
  allowUnscheduled Boolean
  workspaceGroupId Int
  statues          Json[]
  slots            Json[]
  sessions         Session[]
  workspace        workspace  @relation(fields: [workspaceGroupId], references: [groupId])
  schedule         schedule[]
  hostingRoles     role[]
}

model schedule {
  id            String      @id @unique @default(uuid()) @db.Uuid
  Days          Int[]
  Hour          Int
  Minute        Int
  sessionTypeId String      @db.Uuid
  sessions      Session[]
  sessionType   SessionType @relation(fields: [sessionTypeId], references: [id])
}

model sessionUser {
  userid    BigInt
  sessionid String  @db.Uuid
  roleID    String
  slot      Int
  session   Session @relation(fields: [sessionid], references: [id])
  user      user    @relation(fields: [userid], references: [userid])

  @@id([userid, sessionid])
}

model Session {
  id            String        @id @unique @default(uuid()) @db.Uuid
  name          String?
  type          String?
  ownerId       BigInt?
  date          DateTime
  startedAt     DateTime?
  ended         DateTime?
  sessionTypeId String        @db.Uuid
  scheduleId    String?       @db.Uuid
  owner         user?         @relation(fields: [ownerId], references: [userid])
  schedule      schedule?     @relation(fields: [scheduleId], references: [id])
  sessionType   SessionType   @relation(fields: [sessionTypeId], references: [id])
  users         sessionUser[]
  notes         SessionNote[]
  logs          SessionLog[]
}

model SessionNote {
  id        String   @id @unique @default(uuid()) @db.Uuid
  sessionId String   @db.Uuid
  authorId  BigInt
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  author    user     @relation(fields: [authorId], references: [userid])
}

model SessionLog {
  id        String   @id @unique @default(uuid()) @db.Uuid
  sessionId String   @db.Uuid
  actorId   BigInt
  targetId  BigInt?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  actor     user     @relation("SessionLogActor", fields: [actorId], references: [userid])
  target    user?    @relation("SessionLogTarget", fields: [targetId], references: [userid])
}

model ActivitySession {
  id               String    @id @unique @default(uuid()) @db.Uuid
  userId           BigInt
  active           Boolean
  startTime        DateTime
  endTime          DateTime?
  idleTime         BigInt?
  workspaceGroupId Int
  messages         Int?
  universeId       BigInt?
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model apiKey {
  id               String    @id @unique
  name             String
  key              String    @unique
  lastUsed         DateTime?
  createdAt        DateTime  @default(now())
  expiresAt        DateTime?
  workspaceGroupId Int
  createdById      BigInt

  workspace workspace @relation(fields: [workspaceGroupId], references: [groupId])
  createdBy user      @relation(fields: [createdById], references: [userid])
}

model inactivityNotice {
  id               String    @id @unique @default(uuid()) @db.Uuid
  userId           BigInt
  startTime        DateTime
  endTime          DateTime?
  reason           String
  approved         Boolean?  @default(false)
  reviewed         Boolean?  @default(false)
  revoked          Boolean?  @default(false)
  workspaceGroupId Int
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model document {
  id               String    @id @unique @default(uuid()) @db.Uuid
  name             String
  content          Json
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  ownerId          BigInt
  workspaceGroupId Int
  owner            user      @relation(fields: [ownerId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
  roles            role[]
}

model userBook {
  id               String    @id @unique @default(uuid()) @db.Uuid
  userId           BigInt
  type             String
  reason           String
  adminId          BigInt
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  workspaceGroupId Int
  admin            user      @relation("bookAdmin", fields: [adminId], references: [userid])
  user             user      @relation("bookUser", fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
}

model rank {
  userId           BigInt
  rankId           BigInt
  workspaceGroupId Int
  user             user      @relation(fields: [userId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])

  @@id([userId, workspaceGroupId])
}

model Quota {
  id               String      @id @default(uuid()) @db.Uuid
  type             String
  value            Int
  workspaceGroupId Int
  name             String
  workspace        workspace   @relation(fields: [workspaceGroupId], references: [groupId])
  quotaRoles       QuotaRole[]
}

model Ally {
  workspaceGroupId Int
  name             String
  icon             String
  groupId          String
  notes            String[]
  id               String      @id @unique @default(uuid()) @db.Uuid
  workspace        workspace   @relation(fields: [workspaceGroupId], references: [groupId])
  reps             user[]
  allyVisits       allyVisit[]
}

model allyVisit {
  id     String   @id @unique @default(uuid()) @db.Uuid
  ally   Ally     @relation(fields: [allyId], references: [id])
  allyId String   @db.Uuid
  host   user     @relation(fields: [hostId], references: [userid])
  hostId BigInt
  time   DateTime
  name   String
}

model workspaceMember {
  workspaceGroupId Int
  userId           BigInt
  joinDate         DateTime? @default(now())
  birthdayDay      Int?
  birthdayMonth    Int?
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
  user             user      @relation(fields: [userId], references: [userid])
  @@id([workspaceGroupId, userId])
  @@index([userId])
}

model ActivityAdjustment {
  id               String    @id @default(uuid()) @db.Uuid
  userId           BigInt
  actorId          BigInt
  workspaceGroupId Int
  minutes          Int       // positive = award, negative = remove
  reason           String?
  createdAt        DateTime  @default(now())
  user      user      @relation("AdjustmentUser", fields: [userId], references: [userid])
  actor     user      @relation("AdjustmentActor", fields: [actorId], references: [userid])
  workspace workspace @relation(fields: [workspaceGroupId], references: [groupId])
  @@index([userId])
  @@index([actorId])
  @@index([workspaceGroupId])
}

model GameServer {
  id               String    @id @default(uuid()) @db.Uuid
  name             String
  description      String?
  gameId           BigInt    // Roblox Game/Place ID
  universeId       BigInt?   // Roblox Universe ID
  serverUrl        String?   // Custom server URL if needed
  apiKey           String    // API key for server communication
  isActive         Boolean   @default(true)
  lastSeen         DateTime?
  playerCount      Int       @default(0)
  maxPlayers       Int       @default(100)
  workspaceGroupId Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
  commands         ServerCommand[]
  metrics          ServerMetrics[]
  chatMessages     ChatMessage[]
  gameEvents       GameEvent[]
  playerActions    PlayerAction[]
  commandQueue     ServerCommandQueue[]

  @@index([workspaceGroupId])
  @@index([gameId])
}

model ServerCommand {
  id         String    @id @default(uuid()) @db.Uuid
  serverId   String    @db.Uuid
  command    String    // Command type (kick, ban, teleport, message, etc.)
  parameters Json?     // Command parameters
  executedBy BigInt    // User who executed the command
  response   Json?     // Response from server
  status     String    @default("pending") // pending, success, failed
  createdAt  DateTime  @default(now())

  server     GameServer @relation(fields: [serverId], references: [id], onDelete: Cascade)
  executor   user       @relation(fields: [executedBy], references: [userid])

  @@index([serverId])
  @@index([executedBy])
  @@index([status])
}

model ServerMetrics {
  id         String    @id @default(uuid()) @db.Uuid
  serverId   String    @db.Uuid
  playerCount Int
  activePlayers Json?   // List of active players with details
  performance Json?    // Server performance metrics (CPU, memory, etc.)
  timestamp  DateTime  @default(now())

  server     GameServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([serverId])
  @@index([timestamp])
}

model ChatMessage {
  id         String    @id @default(uuid()) @db.Uuid
  serverId   String    @db.Uuid
  userId     BigInt    // Roblox User ID who sent the message
  username   String    // Username at time of message
  message    String    // Chat message content
  filtered   Boolean   @default(false) // Whether message was filtered
  flagged    Boolean   @default(false) // Whether message was flagged for review
  moderatedBy BigInt?  // User who moderated this message
  timestamp  DateTime  @default(now())

  server     GameServer @relation(fields: [serverId], references: [id], onDelete: Cascade)
  moderator  user?      @relation(fields: [moderatedBy], references: [userid])

  @@index([serverId])
  @@index([userId])
  @@index([timestamp])
  @@index([flagged])
}

model GameEvent {
  id         String    @id @default(uuid()) @db.Uuid
  serverId   String    @db.Uuid
  eventType  String    // join, leave, death, purchase, achievement, etc.
  userId     BigInt?   // Roblox User ID (if applicable)
  username   String?   // Username at time of event
  data       Json?     // Event-specific data
  timestamp  DateTime  @default(now())

  server     GameServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([serverId])
  @@index([eventType])
  @@index([userId])
  @@index([timestamp])
}

model PlayerAction {
  id         String    @id @default(uuid()) @db.Uuid
  serverId   String    @db.Uuid
  userId     BigInt    // Roblox User ID
  username   String    // Username at time of action
  actionType String    // movement, afk_start, afk_end, chat, etc.
  position   Json?     // Player position if applicable
  data       Json?     // Additional action data
  timestamp  DateTime  @default(now())

  server     GameServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@index([serverId])
  @@index([userId])
  @@index([actionType])
  @@index([timestamp])
}

model ServerCommandQueue {
  id         String    @id @default(uuid()) @db.Uuid
  serverId   String?   @db.Uuid  // Specific server, or null for all servers
  command    String    // kick, ban, message, shutdown, etc.
  targetUserId BigInt? // Target player for kick/ban commands
  parameters Json?     // Command parameters (reason, message text, etc.)
  executedBy BigInt    // Admin who issued the command
  status     String    @default("pending") // pending, delivered, failed
  priority   Int       @default(1) // Higher numbers = higher priority
  createdAt  DateTime  @default(now())
  deliveredAt DateTime?

  server     GameServer? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  executor   user        @relation(fields: [executedBy], references: [userid])

  @@index([serverId])
  @@index([status])
  @@index([priority, createdAt])
  @@index([targetUserId])
}
